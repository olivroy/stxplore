% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial_snapshots.R
\name{spatial_snapshots.data.frame}
\alias{spatial_snapshots.data.frame}
\title{Plots spatial snapshots of data through time using a dataframe as input.}
\usage{
\method{spatial_snapshots}{data.frame}(
  x,
  xlab = "Longitude",
  ylab = "Latitude",
  title = "",
  palette = "Spectral",
  legend_title = "z",
  lat_col,
  lon_col,
  t_col,
  z_col,
  ifxy = FALSE,
  ...
)
}
\arguments{
\item{x}{The input data in a dataframe.}

\item{xlab}{The x label.}

\item{ylab}{The y label.}

\item{title}{The graph title.}

\item{palette}{The color palette. Default is \code{Spectral}.}

\item{legend_title}{The title for the legend.}

\item{lat_col}{The column or the column name giving the latitude. The y coordinate can be used instead of latitude.}

\item{lon_col}{The column or the column name giving the longitude. The x coordinate can be used instead of longitude.}

\item{t_col}{The time column. Time must be a set of discrete integer values.}

\item{z_col}{The The quantity of interest that will be plotted. Eg. temperature.}

\item{ifxy}{If \code{TRUE} then the country borders are not drawn as longitude and latitude are unknown.}

\item{...}{Other arguments currently ignored.}
}
\value{
A ggplot object.
}
\description{
This function plots a set of spatial snapshots through time. General usage involves latitude and
longitude. However, x and y coordinates can be given instead of longitude and latitude. If x and
y are given instead of longitude and latitude, the country borders will not be shown.
}
\examples{
library(dplyr)
# Dataframe example
data(NOAA_df_1990)
Tmax <- filter(NOAA_df_1990,
  proc == "Tmax" &
  month \%in\% 5:9 &
  year == 1993)
Tmax$t <- Tmax$julian - min(Tmax$julian) + 1
Tmax_days <- subset(Tmax, t \%in\% c(1, 15, 30))
spatial_snapshots(Tmax_days,
  lat_col = 'lat',
  lon_col = 'lon',
  t_col = 't',
  z_col = 'z',
  title = "Maximum Temperature for 3 days ")

# stars example
library(stars)
tif = system.file("tif/L7_ETMs.tif", package = "stars")
x <- read_stars(tif)
spatial_snapshots(x)

}
